add = Add
addDirectory = Add Directory
addExports = Add Exports
addExport = Add Export
addFiles = Add Files
addLibs = Add Libs
addModules = Add Modules
addScripts = Add Scripts
appName = JShFX
availableModules = Available Modules
cancel = Cancel
chart = Chart
classpath = Class Path
codeCompletion = Code Completion Starts
codeCompletionContains = Code Completion Contains
copyPathToClipboard = Copy Path To Clipboard
created = created
default = Default
definitelyIncomplete = Definitely incomplete.
deprecated = Deprecated
dropped = dropped
environment = Environment
error = Error
exception = Exception
evaluate = Evaluate
evaluateLong = Evaluate ({0})
evaluateLine = Evaluate Line
evaluateLineLong = Evaluate Line ({0})
fileNameNotSpecified = File name not specified.
findText = Find Text
historyDown = History Down
historySearch = History Search
historyUp = History Up
image = Image
importStatic = Import Static
insertDirPath = Insert Directory Path
insertFilePaths = Insert Open File Path(s)
insertRelativeFilePaths = Insert Relative Open File Path(s)
insertSaveFilePath = Insert Save File Path
insertSeparatedFilePaths = Insert Separated Open File Path(s)
loadScripts = Load Scripts
modified = modified
modulepath = Module Path
new = New
nothingFound = Nothing found.
noSuchSnippet = no such snippet(s)
notValid = not valid
ok = OK
onlyOneOptionAllowed = Only one option is allowed.
package = Package
printing = Printing
replaced = replaced
reload = Reload
removeSelection = Remove Selection
replaceText = Replace Text
reset = Reset
resetingState = Resetting state.
searching = Searching.
settings = Settings
sourceModule = Source Module
started = Started
startupScripts = Startup Scripts
submit = Submit
submitLong = Submit ({0})
submitLine = Submit Line
submitLineLong = Submit Line ({0})
targetModules = Target Modules
terminated = Terminated: {0}
toggleComment = Toggle Comment
undeclared = {0} not declared
unknown = unknown

# Javadoc block tags
apiNote = API Note
author = Authors
deprecated = Deprecated
exception = Exceptions
implNote = Implementation Note
implSpec = Implementation Requirements
jls = See the Java Language Specification
param = Parameters
return = Returns
revised = Revised
see = See Also
serial = Serial
serialData = Serial Data
serialField = Serial Field
since = Since
throws = Throws
version = Version
untitled = Untitled

msg.file.save = Save file {0}? 
msg.env.adExports.failure.illegalArgument = Illegal argument: {0}
msg.env.empty = No environment set.
msg.env.save.success = Environment saved successfully.
msg.feedback.availableModes = Available feedback modes: {0}
msg.feedback.currentMode = Current feedback mode: {0}
msg.feedback.invalidMode = Invalid feedback mode: {0}
msg.feedback.mode = Feedback mode: {0}
msg.fileNotFound = File {0} not found.
msg.reload = Reloading state.
msg.reload.done = Reloaded.
msg.reload.restore = Restoring state.
msg.resolution.failure = Artifact resolution failed: {0} 
msg.resolution.started = Resolution started.
msg.resolution.success = Resolution succeeded.

# Command help
usage.synopsisHeading = Usage:\u0020
usage.synopsisSubcommandLabel = [COMMAND]
usage.descriptionHeading = %nDescription:%n
usage.commandListHeading = %nCommands:%n
usage.parameterListHeading=%n
usage.optionListHeading = %n

-h = Displays command help.
--help = Displays command help.


.usage.headerHeading = Introduction%n%n
.usage.header = This tool is based on JShell tool that allows you to execute Java code, getting immediate results.
.usage.header.0 = You can enter a Java definition (variable, method, class, etc), like:  int x = 8
.usage.header.1 = or a Java expression, like:  x + x
.usage.header.2 = or a Java statement or import.
.usage.header.3 = These little chunks of Java code are called 'snippets'.%n
.usage.header.4 = There are also the jshell tool commands that allow you to understand and
.usage.header.5 = control what you are doing, like:  /list


.usage.header.6 = %nInput Editing%n
.usage.header.7 = The editing capabilities of JShell are similar to that of other common editors. Keyboard keys and key combinations provide line editing shortcuts.%n
.usage.header.8 =  Left Arrow      - move cursor left
.usage.header.9 =  Right Arrow     - move cursor right
.usage.header.10 =  Up Arrow        - move cursor up
.usage.header.11 =  Down Arrow      - move cursor down
.usage.header.12 =  Alt+D           - insert a directory path %n\
                    Alt+E           - evaluate line
.usage.header.13 =  Alt+O           - insert open file path(s) %n\
                    Shift+Alt+O      - insert relative open file path %n\ 
                    Alt+P            - insert separated open file path(s)
.usage.header.14 =   Alt+S           - insert save file path
.usage.header.15 =  Ctrl+Up Arrow   - move in history up
.usage.header.16 =  Ctrl+Down Arrow - move in history down
.usage.header.17 =  Ctrl+C          - copy selection
.usage.header.18 = Ctrl+E           - evaluate the selected text or all text if not selected %n\
                   Ctrl+F           - find text %n\
                   Ctrl+R           - search history 
.usage.header.19 =  Ctrl+X          - cut selection
.usage.header.20 =  Ctrl+V          - paste
.usage.header.21 =  Ctrl+A          - select all
.usage.header.22 = Ctrl+Z           - undo
.usage.header.23 = Ctrl+Y           - redo
.usage.header.24 = Ctrl+Space       - auto completion starts %n\
                   Shift+Ctrl+Space - auto completion contains %n\
                   Ctrl+/          - toggle comment
.usage.header.25 = Enter           - new line
.usage.header.26 = Shift+Enter     - submit the selected text or all text if not selected
.usage.header.27 = %n

.usage.description = The description of the commands is published at:
.usage.description.0 = https://docs.oracle.com/en/java/javase/${java.version}/tools/jshell

./drop.usage.description = Drops snippets identified by name, ID, or ID range, making them inactive. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of code snippets.
./env.usage.description = Displays the environment settings, or updates the environment settings and performs quiet reload.
/env.--class-path = The <path> is a list of directories, JAR archives, and ZIP archives to search for class files. For Windows, use a semicolon (;) to separate items in the path. On other platforms, use a colon (:) to separate items.
/env.--module-path = The <path> is a list of directories, JAR archives, and ZIP archives to search for modules.For Windows, use a semicolon (;) to separate items in the path. On other platforms, use a colon (:) to separate items.
/env.--add-modules = Root modules to resolve in addition to the initial module. <module> can also be ALL-DEFAULT, ALL-SYSTEM, ALL-MODULE-PATH.
/env.--add-exports = Updates <module> to export <package> to <target-module>, regardless of module declaration. <target-module> can be ALL-UNNAMED to export to all unnamed modules.
/env.start = Sets whether or not the environment is loaded or cleared.
/env.-retain =  Retains the current environment for future sessions. 
./exit.usage.description = Exits the JShell.
./help.usage.description = Displays information about commands.
./history.usage.description = Displays what was entered in this session.
./imports.usage.description = Displays the current active imports, including those from the startup scripts and scripts that were entered on the command line when JShell was started.
./list.usage.description = Displays a list of snippets and their IDs. If no option is entered, then all active snippets are displayed, but startup snippets aren't.
/list.ids = Displays the snippets identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space.
/list.-all = Displays all snippets, including startup snippets and snippets that failed, were overwritten, or were dropped.
/list.-start = Displays startup snippets that were evaluated when JShell was started.
./methods.usage.description = Displays information about the methods that were entered. If no option is entered, then the name, parameter types, and return type of all active methods are displayed.
/method.ids = Displays information for methods identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of code snippets.
/method.-all = Displays information for all methods, including those added when JShell was started, and methods that failed, were overwritten, or were dropped.
/method.-start = Displays information for startup methods that were added when JShell was started.
./open.usage.description = Opens the file with script specified and reads the snippets into the JShell.
./open.usage.description.0 = The script can be a local file or one of the following predefined scripts:
./open.usage.description.1 = default - loads the default entries, which are commonly used as imports.
./open.usage.description.2 = printing - defines print, println, and printf as jshell methods for use within the session.
/open.file = A path to file with JSH script to be loaded or special names: DEFAULT, PRINTING. DEFAULT loads the default entries, which are commonly used as imports. PRINTING defines print, println, and printf as methods for use within the session.
./reload.usage.description = Restarts the session.
./reload.usage.description.0 = Resets the execution state.
./reload.usage.description.1 = Runs the startup scripts.
./reload.usage.description.2 = Replays the history in the order entered. The history includes all valid snippets or /drop commands entered at the jshell prompt, in scripts entered on the command line, or scripts entered with the /open command.
/reload.-quiet = Replays the valid snippets without displaying it. Errors are displayed. 
/reload.-restore = Restores the environment to the state at the start of the previous run of the tool or to the last time a /reset, /reload, or /env command was executed in the previous run. 
./rerun.usage.description = Reruns the snippets identified by ID, range of IDs, or name. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. The first item in the list must be an ID or ID range. Use the /list command to see the IDs of the code snippets. The "rerun" name is optional, the ids may follow directly after /.
./reset.usage.description = Discards all entered snippets and restarts the session.
./reset.usage.description.0 = Resets the execution state.
./reset.usage.description.1 = Runs the startup scripts.
./reset.usage.description.2 = History is not replayed. All code that was entered is lost.
./reset.usage.description.3 = Environment settings are maintained.
./resolve.usage.description = Resolves dependencies from the maven repository, adds them on the class path and performs quiet reload.
/resolve.artifacts = List of maven artifact coordinates in the format groupId:artifactId:version or XML files with maven dependencies.
./save.usage.description = Saves snippets and commands to the file specified. If no options are entered, then active snippets are saved.
/save.ids = Saves the snippets and commands identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of the code snippets.
/save.-all = Saves all snippets, including startup snippets and snippets that were overwritten or failed.
/save.-history = Saves the sequential history of all commands and snippets entered in the current session.
/save.-start = Saves the current startup settings. If no startup scripts were provided, then an empty file is saved.
./set.usage.description = Sets configuration information including feedback mode and start scripts.
/set.feedback = Set the feedback mode describing displayed feedback for entered snippets and commands. Available feedback modes: concise, normal, silent, verbose.
/set.start = The contents of the specified <file> become the default startup snippets and commands. 
/set.-jshpath = The <path> is a list of directories to search for jsh files. For Windows, use a semicolon (;) to separate items in the path. On other platforms, use a colon (:) to separate items.
/set.-retain =  Retain the current settings for future sessions.
./stop.usage.description = Attempts to stop currently running evaluation.
./types.usage.description = Displays classes, interfaces, and enums that were entered. If no option is entered, then all current active classes, interfaces, and enums are displayed.
/types.ids = Displays information for classes, interfaces, and enums identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of the code snippets.
/types.-all = Displays information for all classes, interfaces, and enums, including those added when JShell was started, and classes, interfaces, and enums that failed, were overwritten, or were dropped.
/types.-start = Displays information for startup classes, interfaces, and enums that were added when JShell was started.
./vars.usage.description = Displays the name, type, and value of variables that were entered. If no option is entered, then all current active variables are displayed.
/vars.ids = Displays information for variables identified by name, ID, or ID range. For a range of IDs, provide the starting ID and ending ID separated with a hyphen. To provide a list, separate the items in the list with a space. Use the /list command to see the IDs of the code snippets.
/vars.-all = Displays information for all variables, including those added when JShell was started, and variables that failed, were overwritten, or were dropped.
/vars.-start = Displays information for startup variables that were added when JShell was started.
